diff -urN CS/include/csgeom/poly3d.h CS.new/include/csgeom/poly3d.h
--- CS/include/csgeom/poly3d.h	2007-02-02 13:55:52.000000000 -0600
+++ CS.new/include/csgeom/poly3d.h	2009-11-06 15:31:51.000000000 -0600
@@ -351,7 +351,7 @@
 struct csCompressVertex
 {
   size_t orig_idx;
-  int x, y, z;
+  float x, y, z;
   size_t new_idx;
   bool used;
 };
diff -urN CS/libs/csgeom/poly3d.cpp CS.new/libs/csgeom/poly3d.cpp
--- CS/libs/csgeom/poly3d.cpp	2007-02-01 20:02:34.000000000 -0600
+++ CS.new/libs/csgeom/poly3d.cpp	2009-11-06 15:32:26.000000000 -0600
@@ -884,9 +884,9 @@
   for (i = 0; i < num_vertices; i++)
   {
     vt[i].orig_idx = i;
-    vt[i].x = (int)ceil (vertices[i].x * 1000000);
-    vt[i].y = (int)ceil (vertices[i].y * 1000000);
-    vt[i].z = (int)ceil (vertices[i].z * 1000000);
+    vt[i].x = (float)ceil (vertices[i].x * 1000000.0);
+    vt[i].y = (float)ceil (vertices[i].y * 1000000.0);
+    vt[i].z = (float)ceil (vertices[i].z * 1000000.0);
   }
 
   // First sort so that all (nearly) equal vertices are together.
diff -urN CS.old/include/cstool/vertexcompress.h CS.new/include/cstool/vertexcompress.h
--- CS.old/include/cstool/vertexcompress.h	2009-12-09 17:05:46.178352663 -0600
+++ CS.new/include/cstool/vertexcompress.h	2009-12-09 16:45:19.987352000 -0600
@@ -34,10 +34,10 @@
 struct csCompressVertexInfo
 {
   size_t orig_idx;
-  int x, y, z;
-  int u, v;
-  int nx, ny, nz;
-  int r, g, b, a;
+  float x, y, z;
+  float u, v;
+  float nx, ny, nz;
+  float r, g, b, a;
   size_t new_idx;
   bool used;
 };
diff -urN CS.old/libs/cstool/vertexcompress.cpp CS.new/libs/cstool/vertexcompress.cpp
--- CS.old/libs/cstool/vertexcompress.cpp	2009-04-27 16:02:22.670617000 -0500
+++ CS.new/libs/cstool/vertexcompress.cpp	2009-12-09 16:58:21.064352000 -0600
@@ -111,20 +111,20 @@
   for (i = 0; i < num_vertices; i++)
   {
     vt[i].orig_idx = i;
-    vt[i].x = (int)ceil (vertices[i].x * 1000000);
-    vt[i].y = (int)ceil (vertices[i].y * 1000000);
-    vt[i].z = (int)ceil (vertices[i].z * 1000000);
-    vt[i].u = (int)ceil (texels[i].x * 1000000);
-    vt[i].v = (int)ceil (texels[i].y * 1000000);
-    vt[i].nx = (int)ceil (normals[i].x * 1000000);
-    vt[i].ny = (int)ceil (normals[i].y * 1000000);
-    vt[i].nz = (int)ceil (normals[i].z * 1000000);
+    vt[i].x = (float)ceil (vertices[i].x * 1000000);
+    vt[i].y = (float)ceil (vertices[i].y * 1000000);
+    vt[i].z = (float)ceil (vertices[i].z * 1000000);
+    vt[i].u = (float)ceil (texels[i].x * 1000000);
+    vt[i].v = (float)ceil (texels[i].y * 1000000);
+    vt[i].nx = (float)ceil (normals[i].x * 1000000);
+    vt[i].ny = (float)ceil (normals[i].y * 1000000);
+    vt[i].nz = (float)ceil (normals[i].z * 1000000);
     if (doColors)
     {
-      vt[i].r = (int)ceil (colors[i].red * 1000000);
-      vt[i].g = (int)ceil (colors[i].green * 1000000);
-      vt[i].b = (int)ceil (colors[i].blue * 1000000);
-      vt[i].a = (int)ceil (colors[i].alpha * 1000000);
+      vt[i].r = (float)ceil (colors[i].red * 1000000);
+      vt[i].g = (float)ceil (colors[i].green * 1000000);
+      vt[i].b = (float)ceil (colors[i].blue * 1000000);
+      vt[i].a = (float)ceil (colors[i].alpha * 1000000);
     }
     else
     {
